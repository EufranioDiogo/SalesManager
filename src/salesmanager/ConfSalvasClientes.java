/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesmanager;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ed
 */
public class ConfSalvasClientes extends javax.swing.JFrame {
    Connection connection;
    int idSelected;
    InvoiceScreen invoiceScreenForm;
    CadastrarCliente cadastrarClienteForm;
    String clientNIF;
    String clientName;
    /**
     * Creates new form ConfSalvasProductos
     */
    public ConfSalvasClientes() {
        initComponents();
        initializeDatabaseConnection();
        this.setLocationRelativeTo(null);
        getClients();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    public ConfSalvasClientes(CadastrarCliente cadastrarCliente) {
        initComponents();
        initializeDatabaseConnection();
        this.cadastrarClienteForm = cadastrarCliente;
        this.setLocationRelativeTo(null);
        getClients();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    ConfSalvasClientes(InvoiceScreen aThis) {
        initComponents();
        this.setVisible(true);
        initializeDatabaseConnection();
        this.setLocationRelativeTo(null);
        this.invoiceScreenForm = aThis;
        getClients();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    public void initializeDatabaseConnection() {
        try {
            Class.forName("org.postgresql.Driver");
            
            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/invoicedb", "postgres", "L1i2G1D7");
        
            if (connection != null) {
                System.out.println("Connection working");
            } else {
                System.out.println("Connection failed");
            }
        } catch(Exception e) {
            System.out.println(e.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        clientNameTextBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        clientTable.setBackground(new java.awt.Color(254, 254, 254));
        clientTable.setForeground(new java.awt.Color(1, 1, 1));
        clientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "nome", "nif", "telefone", "email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        clientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(clientTable);

        jLabel1.setBackground(new java.awt.Color(254, 254, 254));
        jLabel1.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(1, 1, 1));
        jLabel1.setText("Nome Do Cliente:");

        clientNameTextBox.setBackground(new java.awt.Color(254, 254, 254));
        clientNameTextBox.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        clientNameTextBox.setForeground(new java.awt.Color(1, 1, 1));
        clientNameTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clientNameTextBoxKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 171, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(clientNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientNameTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientNameTextBoxKeyReleased
        String clientName = clientNameTextBox.getText().trim().toLowerCase();
        
        if (!clientName.isEmpty()) {
            try {
                String query = "SELECT * FROM costumer WHERE LOWER(nome) LIKE ?;";
                PreparedStatement statement = connection.prepareStatement(query);
                
                statement.setString(1, clientName + "%");
                ResultSet result = statement.executeQuery();
                
                int row = 0;
                
                while (clientTable.getRowCount() > 0) {
                    DefaultTableModel model = (DefaultTableModel) clientTable.getModel();
                    model.removeRow(0);
                }
                
                while (result.next()) {
                    DefaultTableModel model = (DefaultTableModel) clientTable.getModel();
                    model.addRow(new Object[]{result.getInt(1), result.getString(2), result.getString(3), result.getString(4), result.getString(5)});
                    clientTable.setValueAt(result.getInt(1), row, 0);
                    clientTable.setValueAt(result.getString(2), row, 1);
                    clientTable.setValueAt(result.getString(3), row, 2);
                    clientTable.setValueAt(result.getString(4), row, 3);
                    clientTable.setValueAt(result.getString(5), row, 4);
                    
                    row++;
                }
                if (statement.getFetchSize() <= 0) {
                    while(row < clientTable.getRowCount()) {
                        clientTable.setValueAt(0, row, 0);
                        clientTable.setValueAt("", row, 1);
                        clientTable.setValueAt("", row, 2);
                        clientTable.setValueAt("", row, 3);
                        clientTable.setValueAt("", row, 4);
                        row++;
                    }
                }
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_clientNameTextBoxKeyReleased

    public void getClients() {
        try {
            String query = "SELECT * FROM costumer;";
            PreparedStatement statement = connection.prepareStatement(query);

            ResultSet result = statement.executeQuery();

            int row = 0;

            while (clientTable.getRowCount() > 0) {
                DefaultTableModel model = (DefaultTableModel) clientTable.getModel();
                model.removeRow(0);
            }

            while (result.next()) {
                System.out.println("Txee");
                DefaultTableModel model = (DefaultTableModel) clientTable.getModel();
                model.addRow(new Object[]{result.getInt(1), result.getString(2), result.getString(3), result.getString(4), result.getString(5)});
                clientTable.setValueAt(result.getInt(1), row, 0);
                clientTable.setValueAt(result.getString(2), row, 1);
                clientTable.setValueAt(result.getString(3), row, 2);
                clientTable.setValueAt(result.getString(4), row, 3);
                clientTable.setValueAt(result.getString(5), row, 4);

                row++;
            }
            if (statement.getFetchSize() <= 0) {
                while(row < clientTable.getRowCount()) {
                    clientTable.setValueAt(0, row, 0);
                    clientTable.setValueAt("", row, 1);
                    clientTable.setValueAt("", row, 2);
                    clientTable.setValueAt("", row, 3);
                    clientTable.setValueAt("", row, 4);
                    row++;
                }
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
    
    private void clientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientTableMouseClicked
        int rowIndex = clientTable.getSelectedRow();
        
        int ID = Integer.parseInt(clientTable.getValueAt(rowIndex, 0).toString());
        clientName = (String) clientTable.getValueAt(rowIndex, 1);
        clientNIF = (String) clientTable.getValueAt(rowIndex, 2);
        idSelected = ID;
        
        if (this.invoiceScreenForm != null) {
            System.out.println("eNTROU 1");
            this.invoiceScreenForm.setProductInfoByIDInvoice();
            
            this.cadastrarClienteForm = null;
            this.invoiceScreenForm = null;
        } else if (this.cadastrarClienteForm != null){
            System.out.println("eNTROU 2");
            this.cadastrarClienteForm.setClientInfoByID();
            this.cadastrarClienteForm = null;
            this.invoiceScreenForm = null;
        }
        
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_clientTableMouseClicked

    public int getIDSelected() {
        return idSelected;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfSalvasClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfSalvasClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfSalvasClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfSalvasClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConfSalvasClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField clientNameTextBox;
    private javax.swing.JTable clientTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
